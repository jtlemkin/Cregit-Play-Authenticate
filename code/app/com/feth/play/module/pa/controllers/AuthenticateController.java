begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|PlayAuthenticate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AccessTokenException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|AuthProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|AuthUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|AuthUserIdentity
import|;
end_import

begin_import
import|import
name|play
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Result
import|;
end_import

begin_class
specifier|public
class|class
name|AuthenticateController
extends|extends
name|Controller
block|{
specifier|private
specifier|static
name|String
name|getJumpUrl
parameter_list|(
specifier|final
name|Context
name|ctx
parameter_list|)
block|{
specifier|final
name|String
name|originalUrl
init|=
name|PlayAuthenticate
operator|.
name|getOriginalUrl
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalUrl
operator|!=
literal|null
condition|)
block|{
return|return
name|originalUrl
return|;
block|}
else|else
block|{
comment|// this can be null if the user did not correctly define the resolver
specifier|final
name|Call
name|c
init|=
name|PlayAuthenticate
operator|.
name|getResolver
argument_list|()
operator|.
name|afterAuth
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
operator|.
name|url
argument_list|()
return|;
block|}
else|else
block|{
comment|// go to root instead, but log this
name|Logger
operator|.
name|warn
argument_list|(
literal|"Resolver did not contain information about where to go after authentication - redirecting to /"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|afterAuthFallback
init|=
name|PlayAuthenticate
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getString
argument_list|(
literal|"afterAuthFallback"
argument_list|)
decl_stmt|;
if|if
condition|(
name|afterAuthFallback
operator|!=
literal|null
operator|&&
operator|!
name|afterAuthFallback
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|afterAuthFallback
return|;
block|}
comment|// Not even the config setting was there or valid...meh
return|return
literal|"/"
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Result
name|authenticate
parameter_list|(
specifier|final
name|String
name|provider
parameter_list|)
block|{
specifier|final
name|AuthProvider
name|ap
init|=
name|AuthProvider
operator|.
name|Registry
operator|.
name|get
argument_list|(
name|provider
argument_list|)
decl_stmt|;
if|if
condition|(
name|ap
operator|==
literal|null
condition|)
block|{
comment|// Provider wasn't found and/or user was fooling with our stuff
return|return
name|notFound
argument_list|()
return|;
block|}
try|try
block|{
specifier|final
name|Object
name|o
init|=
name|ap
operator|.
name|authenticate
argument_list|(
name|ctx
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|redirect
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|AuthUser
condition|)
block|{
specifier|final
name|AuthUser
name|u
init|=
operator|(
name|AuthUser
operator|)
name|o
decl_stmt|;
comment|// We might want to do merging here:
comment|// http://stackoverflow.com/questions/6666267/architecture-for-merging-multiple-user-accounts-together
comment|//				1. The account is linked to a local account and no session cookie is present --> Login
comment|//				2. The account is linked to a local account and a session cookie is present --> Merge
comment|//				3. The account is not linked to a local account and no session cookie is present --> Signup
comment|//				4. The account is not linked to a local account and a session cookie is present --> Linking Additional account
specifier|final
name|boolean
name|isLoggedIn
init|=
name|PlayAuthenticate
operator|.
name|isLoggedIn
argument_list|(
name|session
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isLinked
init|=
name|PlayAuthenticate
operator|.
name|getUserService
argument_list|()
operator|.
name|isLinked
argument_list|(
name|u
argument_list|)
decl_stmt|;
comment|// TODO allow deactivation of account merge
specifier|final
name|boolean
name|accountMergeEnabled
init|=
name|PlayAuthenticate
operator|.
name|isSuggestAccountMerge
argument_list|()
decl_stmt|;
comment|// get the user with which we are logged in - is null if we are not logged in
specifier|final
name|AuthUser
name|oldUser
init|=
name|PlayAuthenticate
operator|.
name|getUser
argument_list|(
name|ctx
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AuthUser
name|loginUser
decl_stmt|;
if|if
condition|(
name|isLinked
operator|&&
operator|!
name|isLoggedIn
condition|)
block|{
comment|// 1. -> Login
name|loginUser
operator|=
name|u
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isLinked
operator|&&
name|isLoggedIn
condition|)
block|{
comment|// 2. -> Merge
comment|// merge the two identities and return the AuthUser we want to use for the log in
name|loginUser
operator|=
name|PlayAuthenticate
operator|.
name|getUserService
argument_list|()
operator|.
name|merge
argument_list|(
name|u
argument_list|,
name|oldUser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isLinked
operator|&&
operator|!
name|isLoggedIn
condition|)
block|{
comment|// 3. -> Signup
specifier|final
name|Long
name|id
init|=
name|PlayAuthenticate
operator|.
name|getUserService
argument_list|()
operator|.
name|save
argument_list|(
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Could not sign you up"
argument_list|)
throw|;
block|}
name|loginUser
operator|=
name|u
expr_stmt|;
block|}
else|else
block|{
comment|// !isLinked&& isLoggedIn:
comment|// 4. -> Link additional
name|loginUser
operator|=
name|PlayAuthenticate
operator|.
name|getUserService
argument_list|()
operator|.
name|link
argument_list|(
name|oldUser
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
comment|// log in the user
name|PlayAuthenticate
operator|.
name|storeUser
argument_list|(
name|session
argument_list|()
argument_list|,
name|loginUser
argument_list|)
expr_stmt|;
return|return
name|redirect
argument_list|(
name|getJumpUrl
argument_list|(
name|ctx
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalServerError
argument_list|(
literal|"Something went wrong"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|AccessTokenException
condition|)
block|{
return|return
name|internalServerError
argument_list|(
literal|"Exchanging request token for access token failed"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AccessDeniedException
condition|)
block|{
return|return
name|forbidden
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
return|return
name|internalServerError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

