begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|password
package|;
end_package

begin_import
import|import
name|org
operator|.
name|mindrot
operator|.
name|jbcrypt
operator|.
name|BCrypt
import|;
end_import

begin_import
import|import
name|play
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|play
operator|.
name|data
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|PlayAuthenticate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|AuthProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|user
operator|.
name|AuthUser
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|UsernamePasswordAuthProvider
parameter_list|<
name|UL
extends|extends
name|UsernamePasswordAuthUser
parameter_list|,
name|US
extends|extends
name|UsernamePasswordAuthUser
parameter_list|,
name|L
extends|extends
name|UsernamePasswordAuthProvider
operator|.
name|UsernamePassword
parameter_list|,
name|S
extends|extends
name|UsernamePasswordAuthProvider
operator|.
name|UsernamePassword
parameter_list|>
extends|extends
name|AuthProvider
block|{
specifier|static
specifier|final
name|String
name|PROVIDER_KEY
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|CASE_SIGNUP
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|CASE_LOGIN
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
enum|enum
name|SignupResult
block|{
name|USER_EXISTS
block|,
name|USER_UNVERIFIED
block|,
name|USER_CREATED
block|}
specifier|protected
enum|enum
name|LoginResult
block|{
name|USER_UNVERIFIED
block|,
name|USER_LOGGED_IN
block|,
name|NOT_FOUND
block|,
name|WRONG_PASSWORD
block|}
specifier|public
specifier|static
interface|interface
name|UsernamePassword
block|{
specifier|public
name|String
name|getEmail
parameter_list|()
function_decl|;
specifier|public
name|String
name|getPassword
parameter_list|()
function_decl|;
block|}
specifier|public
name|UsernamePasswordAuthProvider
parameter_list|(
specifier|final
name|Application
name|app
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|PROVIDER_KEY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|authenticate
parameter_list|(
specifier|final
name|Context
name|context
parameter_list|,
specifier|final
name|Object
name|payload
parameter_list|)
throws|throws
name|AuthException
block|{
if|if
condition|(
name|payload
operator|==
name|CASE_SIGNUP
condition|)
block|{
specifier|final
name|S
name|signup
init|=
name|getSignup
argument_list|(
name|context
operator|.
name|request
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|US
name|authUser
init|=
name|buildSignupAuthUser
argument_list|(
name|signup
argument_list|)
decl_stmt|;
specifier|final
name|SignupResult
name|r
init|=
name|signupUser
argument_list|(
name|authUser
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
name|USER_EXISTS
case|:
comment|// The user exists already
return|return
name|userExists
argument_list|(
name|authUser
argument_list|)
operator|.
name|url
argument_list|()
return|;
case|case
name|USER_UNVERIFIED
case|:
comment|// TODO: resend validation email after X minutes
return|return
name|userUnverified
argument_list|(
name|authUser
argument_list|)
operator|.
name|url
argument_list|()
return|;
case|case
name|USER_CREATED
case|:
comment|// Send validation email
comment|// continue to login...
return|return
name|authUser
return|;
default|default:
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Something in signup went wrong"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|payload
operator|==
name|CASE_LOGIN
condition|)
block|{
specifier|final
name|L
name|login
init|=
name|getLogin
argument_list|(
name|context
operator|.
name|request
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|UL
name|authUser
init|=
name|buildLoginAuthUser
argument_list|(
name|login
argument_list|)
decl_stmt|;
specifier|final
name|LoginResult
name|r
init|=
name|loginUser
argument_list|(
name|authUser
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
name|USER_UNVERIFIED
case|:
comment|// The email of the user is not verified, yet - we won't allow him to log in
return|return
name|userUnverified
argument_list|(
name|authUser
argument_list|)
operator|.
name|url
argument_list|()
return|;
case|case
name|USER_LOGGED_IN
case|:
comment|// The user exists and the given password was correct
return|return
name|authUser
return|;
case|case
name|WRONG_PASSWORD
case|:
comment|// don't expose this - it might harm users privacy if anyone knows they signed up for our service
case|case
name|NOT_FOUND
case|:
name|context
operator|.
name|flash
argument_list|()
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
literal|"User could not be found or password was wrong."
argument_list|)
expr_stmt|;
return|return
name|PlayAuthenticate
operator|.
name|getResolver
argument_list|()
operator|.
name|login
argument_list|()
operator|.
name|url
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Something in login went wrong"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|PlayAuthenticate
operator|.
name|getResolver
argument_list|()
operator|.
name|login
argument_list|()
operator|.
name|url
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|Result
name|handleLogin
parameter_list|(
specifier|final
name|Context
name|ctx
parameter_list|)
block|{
return|return
name|PlayAuthenticate
operator|.
name|handleAuthentication
argument_list|(
name|PROVIDER_KEY
argument_list|,
name|ctx
argument_list|,
name|CASE_LOGIN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AuthUser
name|getSessionAuthUser
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|long
name|expires
parameter_list|)
block|{
comment|// TODO implement expiry and use a custom impl
return|return
operator|new
name|DefaultUsernamePasswordAuthUser
argument_list|(
literal|null
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Result
name|handleSignup
parameter_list|(
specifier|final
name|Context
name|ctx
parameter_list|)
block|{
return|return
name|PlayAuthenticate
operator|.
name|handleAuthentication
argument_list|(
name|PROVIDER_KEY
argument_list|,
name|ctx
argument_list|,
name|CASE_SIGNUP
argument_list|)
return|;
block|}
specifier|private
name|S
name|getSignup
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|)
block|{
specifier|final
name|Form
argument_list|<
name|S
argument_list|>
name|filledForm
init|=
name|getSignupForm
argument_list|()
operator|.
name|bindFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|filledForm
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|L
name|getLogin
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|)
block|{
specifier|final
name|Form
argument_list|<
name|L
argument_list|>
name|filledForm
init|=
name|getLoginForm
argument_list|()
operator|.
name|bindFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|filledForm
operator|.
name|get
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|UL
name|buildLoginAuthUser
parameter_list|(
specifier|final
name|L
name|login
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|US
name|buildSignupAuthUser
parameter_list|(
specifier|final
name|S
name|signup
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|LoginResult
name|loginUser
parameter_list|(
specifier|final
name|UL
name|authUser
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|SignupResult
name|signupUser
parameter_list|(
specifier|final
name|US
name|user
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Form
argument_list|<
name|S
argument_list|>
name|getSignupForm
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Form
argument_list|<
name|L
argument_list|>
name|getLoginForm
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Call
name|userExists
parameter_list|(
specifier|final
name|UsernamePasswordAuthUser
name|authUser
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Call
name|userUnverified
parameter_list|(
specifier|final
name|UsernamePasswordAuthUser
name|authUser
parameter_list|)
function_decl|;
block|}
end_class

end_unit

