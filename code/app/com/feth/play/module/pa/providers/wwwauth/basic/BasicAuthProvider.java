begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright Â© 2014 Florian Hars, nMIT Solutions GmbH  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|wwwauth
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|play
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|wwwauth
operator|.
name|WWWAuthenticateProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|user
operator|.
name|AuthUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ning
operator|.
name|http
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ning
operator|.
name|http
operator|.
name|util
operator|.
name|UTF8UrlEncoder
import|;
end_import

begin_comment
comment|/** A provider for RFC 2617 Basic Authentication.  *  * This is the simplest possible HTTP authentication mechanism.  * Owing to its dubious security properies, this mechanism should  * probably not be used in production. This code mostly serves as  * an example of how to implement subclasses of [WWWAuthenticateProvider].  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BasicAuthProvider
extends|extends
name|WWWAuthenticateProvider
block|{
specifier|public
name|BasicAuthProvider
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
comment|/** Check the provided credentials. 	 * 	 * @param username The user name supplied by the browser 	 * @param password The password supplied by the browser 	 * @return An AuthUser instance if the credentials are valid, null otherwise 	 */
specifier|protected
specifier|abstract
name|AuthUser
name|authenticateUser
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|neededSettingKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|SettingKeys
operator|.
name|REALM
argument_list|)
return|;
block|}
comment|/** Basic auth has a single configuration parameter, the realm. 	 */
specifier|public
specifier|static
specifier|abstract
class|class
name|SettingKeys
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REALM
init|=
literal|"realm"
decl_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|authScheme
parameter_list|()
block|{
return|return
literal|"Basic"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|challenge
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|String
name|realm
init|=
name|getConfiguration
argument_list|()
operator|.
name|getString
argument_list|(
name|SettingKeys
operator|.
name|REALM
argument_list|)
decl_stmt|;
comment|// TODO: Check that this is actually the correct encoding
return|return
name|String
operator|.
name|format
argument_list|(
literal|"realm=\"%s\""
argument_list|,
name|UTF8UrlEncoder
operator|.
name|encode
argument_list|(
name|realm
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AuthUser
name|authenticateResponse
parameter_list|(
name|String
name|response
parameter_list|)
block|{
name|String
name|decoded
decl_stmt|;
try|try
block|{
name|decoded
operator|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|response
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// Working non-ASCII in Basic Auth is pure luck, anyway
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|decoded
operator|=
literal|""
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|decoded
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
name|authenticateUser
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

