begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|oauth1
operator|.
name|xing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|play
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|play
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|json
operator|.
name|JsValue
import|;
end_import

begin_import
import|import
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|oauth
operator|.
name|ConsumerKey
import|;
end_import

begin_import
import|import
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|oauth
operator|.
name|OAuthCalculator
import|;
end_import

begin_import
import|import
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|oauth
operator|.
name|RequestToken
import|;
end_import

begin_import
import|import
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|ws
operator|.
name|WS
import|;
end_import

begin_import
import|import
name|play
operator|.
name|libs
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AccessTokenException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|exceptions
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|oauth1
operator|.
name|OAuth1AuthProvider
import|;
end_import

begin_comment
comment|/**  * Auth provider for business social network<a  * href="https://www.xing.com/">XING</a>.  */
end_comment

begin_class
specifier|public
class|class
name|XingAuthProvider
extends|extends
name|OAuth1AuthProvider
argument_list|<
name|XingAuthUser
argument_list|,
name|XingAuthInfo
argument_list|>
block|{
specifier|static
specifier|final
name|String
name|PROVIDER_KEY
init|=
literal|"xing"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER_INFO_URL_SETTING_KEY
init|=
literal|"userInfoUrl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERROR
init|=
literal|"xing_error"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|ACCESS_DENIED
init|=
literal|"user_abort"
decl_stmt|;
specifier|public
name|XingAuthProvider
parameter_list|(
specifier|final
name|Application
name|app
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|XingAuthInfo
name|buildInfo
parameter_list|(
name|RequestToken
name|rtoken
parameter_list|)
throws|throws
name|AccessTokenException
block|{
return|return
operator|new
name|XingAuthInfo
argument_list|(
name|rtoken
operator|.
name|token
argument_list|()
argument_list|,
name|rtoken
operator|.
name|secret
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|PROVIDER_KEY
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|neededSettingKeys
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|neededSettingKeys
init|=
name|super
operator|.
name|neededSettingKeys
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|neededSettingKeys
argument_list|,
name|USER_INFO_URL_SETTING_KEY
argument_list|)
expr_stmt|;
return|return
name|neededSettingKeys
return|;
block|}
annotation|@
name|Override
specifier|protected
name|XingAuthUser
name|transform
parameter_list|(
name|XingAuthInfo
name|identity
parameter_list|)
throws|throws
name|AuthException
block|{
specifier|final
name|String
name|url
init|=
name|getConfiguration
argument_list|()
operator|.
name|getString
argument_list|(
name|USER_INFO_URL_SETTING_KEY
argument_list|)
decl_stmt|;
specifier|final
name|RequestToken
name|token
init|=
operator|new
name|RequestToken
argument_list|(
name|identity
operator|.
name|getAccessToken
argument_list|()
argument_list|,
name|identity
operator|.
name|getAccessTokenSecret
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|c
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|ConsumerKey
name|cK
init|=
operator|new
name|ConsumerKey
argument_list|(
name|c
operator|.
name|getString
argument_list|(
name|SettingKeys
operator|.
name|CONSUMER_KEY
argument_list|)
argument_list|,
name|c
operator|.
name|getString
argument_list|(
name|SettingKeys
operator|.
name|CONSUMER_SECRET
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|OAuthCalculator
name|calculator
init|=
operator|new
name|OAuthCalculator
argument_list|(
name|cK
argument_list|,
name|token
argument_list|)
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|Response
argument_list|>
name|future
init|=
name|WS
operator|.
name|url
argument_list|(
name|url
argument_list|)
operator|.
name|sign
argument_list|(
name|calculator
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|ws
operator|.
name|Response
name|response
init|=
operator|new
name|play
operator|.
name|libs
operator|.
name|F
operator|.
name|Promise
argument_list|<
name|play
operator|.
name|api
operator|.
name|libs
operator|.
name|ws
operator|.
name|Response
argument_list|>
argument_list|(
name|future
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|JsValue
name|json
init|=
name|response
operator|.
name|json
argument_list|()
decl_stmt|;
return|return
operator|new
name|XingAuthUser
argument_list|(
name|Json
operator|.
name|parse
argument_list|(
name|json
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"users"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|identity
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|authenticate
parameter_list|(
name|Context
name|context
parameter_list|,
name|Object
name|payload
parameter_list|)
throws|throws
name|AuthException
block|{
comment|// Check whether we got an error in the request
specifier|final
name|Request
name|request
init|=
name|context
operator|.
name|request
argument_list|()
decl_stmt|;
specifier|final
name|String
name|error
init|=
name|request
operator|.
name|getQueryString
argument_list|(
name|ERROR
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|error
argument_list|)
condition|)
block|{
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|ACCESS_DENIED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
comment|// Everything OK â back to normal workflow
return|return
name|super
operator|.
name|authenticate
argument_list|(
name|context
argument_list|,
name|payload
argument_list|)
return|;
block|}
block|}
end_class

end_unit

