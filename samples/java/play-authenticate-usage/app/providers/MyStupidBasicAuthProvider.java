begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright Â© 2014 Florian Hars, nMIT Solutions GmbH  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|providers
package|;
end_package

begin_import
import|import
name|play
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|play
operator|.
name|twirl
operator|.
name|api
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Http
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|views
operator|.
name|html
operator|.
name|login
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|providers
operator|.
name|wwwauth
operator|.
name|basic
operator|.
name|BasicAuthProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|user
operator|.
name|AuthUser
import|;
end_import

begin_comment
comment|/** A really simple basic auth provider that accepts one hard coded user */
end_comment

begin_class
specifier|public
class|class
name|MyStupidBasicAuthProvider
extends|extends
name|BasicAuthProvider
block|{
specifier|public
name|MyStupidBasicAuthProvider
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
name|super
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AuthUser
name|authenticateUser
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|username
operator|.
name|equals
argument_list|(
literal|"example"
argument_list|)
operator|&&
name|password
operator|.
name|equals
argument_list|(
literal|"secret"
argument_list|)
condition|)
block|{
return|return
operator|new
name|AuthUser
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"example"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
literal|"basic"
return|;
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
literal|"basic"
return|;
block|}
comment|/** Diplay the normal login form if HTTP authentication fails */
annotation|@
name|Override
specifier|protected
name|Content
name|unauthorized
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|login
operator|.
name|render
argument_list|(
name|MyUsernamePasswordAuthProvider
operator|.
name|LOGIN_FORM
argument_list|)
return|;
block|}
block|}
end_class

end_unit

