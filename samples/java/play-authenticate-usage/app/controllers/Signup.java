begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|controllers
package|;
end_package

begin_import
import|import
name|models
operator|.
name|TokenAction
import|;
end_import

begin_import
import|import
name|models
operator|.
name|TokenAction
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|models
operator|.
name|User
import|;
end_import

begin_import
import|import
name|play
operator|.
name|data
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|play
operator|.
name|data
operator|.
name|FormFactory
import|;
end_import

begin_import
import|import
name|play
operator|.
name|i18n
operator|.
name|MessagesApi
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|play
operator|.
name|mvc
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|providers
operator|.
name|MyLoginUsernamePasswordAuthUser
import|;
end_import

begin_import
import|import
name|providers
operator|.
name|MyUsernamePasswordAuthProvider
import|;
end_import

begin_import
import|import
name|providers
operator|.
name|MyUsernamePasswordAuthProvider
operator|.
name|MyIdentity
import|;
end_import

begin_import
import|import
name|providers
operator|.
name|MyUsernamePasswordAuthUser
import|;
end_import

begin_import
import|import
name|service
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|views
operator|.
name|html
operator|.
name|account
operator|.
name|signup
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|PlayAuthenticate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
specifier|public
class|class
name|Signup
extends|extends
name|Controller
block|{
specifier|public
specifier|static
class|class
name|PasswordReset
extends|extends
name|Account
operator|.
name|PasswordChange
block|{
specifier|public
name|PasswordReset
parameter_list|()
block|{ 		}
specifier|public
name|PasswordReset
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
specifier|public
name|String
name|token
decl_stmt|;
specifier|public
name|String
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
specifier|public
name|void
name|setToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|Form
argument_list|<
name|PasswordReset
argument_list|>
name|PASSWORD_RESET_FORM
decl_stmt|;
specifier|private
specifier|final
name|Form
argument_list|<
name|MyIdentity
argument_list|>
name|FORGOT_PASSWORD_FORM
decl_stmt|;
specifier|private
specifier|final
name|PlayAuthenticate
name|auth
decl_stmt|;
specifier|private
specifier|final
name|UserProvider
name|userProvider
decl_stmt|;
specifier|private
specifier|final
name|MyUsernamePasswordAuthProvider
name|userPaswAuthProvider
decl_stmt|;
specifier|private
specifier|final
name|MessagesApi
name|msg
decl_stmt|;
annotation|@
name|Inject
specifier|public
name|Signup
parameter_list|(
specifier|final
name|PlayAuthenticate
name|auth
parameter_list|,
specifier|final
name|UserProvider
name|userProvider
parameter_list|,
specifier|final
name|MyUsernamePasswordAuthProvider
name|userPaswAuthProvider
parameter_list|,
specifier|final
name|FormFactory
name|formFactory
parameter_list|,
specifier|final
name|MessagesApi
name|msg
parameter_list|)
block|{
name|this
operator|.
name|auth
operator|=
name|auth
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|userPaswAuthProvider
operator|=
name|userPaswAuthProvider
expr_stmt|;
name|this
operator|.
name|PASSWORD_RESET_FORM
operator|=
name|formFactory
operator|.
name|form
argument_list|(
name|PasswordReset
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|FORGOT_PASSWORD_FORM
operator|=
name|formFactory
operator|.
name|form
argument_list|(
name|MyIdentity
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|msg
operator|=
name|msg
expr_stmt|;
block|}
specifier|public
name|Result
name|unverified
parameter_list|()
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ok
argument_list|(
name|unverified
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Result
name|forgotPassword
parameter_list|(
specifier|final
name|String
name|email
parameter_list|)
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
name|Form
argument_list|<
name|MyIdentity
argument_list|>
name|form
init|=
name|FORGOT_PASSWORD_FORM
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|=
name|FORGOT_PASSWORD_FORM
operator|.
name|fill
argument_list|(
operator|new
name|MyIdentity
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
argument_list|(
name|password_forgot
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|,
name|form
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Result
name|doForgotPassword
parameter_list|()
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Form
argument_list|<
name|MyIdentity
argument_list|>
name|filledForm
init|=
name|FORGOT_PASSWORD_FORM
operator|.
name|bindFromRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|filledForm
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
comment|// User did not fill in his/her email
return|return
name|badRequest
argument_list|(
name|password_forgot
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|,
name|filledForm
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// The email address given *BY AN UNKNWON PERSON* to the form - we
comment|// should find out if we actually have a user with this email
comment|// address and whether password login is enabled for him/her. Also
comment|// only send if the email address of the user has been verified.
specifier|final
name|String
name|email
init|=
name|filledForm
operator|.
name|get
argument_list|()
operator|.
name|email
decl_stmt|;
comment|// We don't want to expose whether a given email address is signed
comment|// up, so just say an email has been sent, even though it might not
comment|// be true - that's protecting our user privacy.
name|flash
argument_list|(
name|Application
operator|.
name|FLASH_MESSAGE_KEY
argument_list|,
name|this
operator|.
name|msg
operator|.
name|preferred
argument_list|(
name|request
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
literal|"playauthenticate.reset_password.message.instructions_sent"
argument_list|,
name|email
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|User
name|user
init|=
name|User
operator|.
name|findByEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
comment|// yep, we have a user with this email that is active - we do
comment|// not know if the user owning that account has requested this
comment|// reset, though.
specifier|final
name|MyUsernamePasswordAuthProvider
name|provider
init|=
name|this
operator|.
name|userPaswAuthProvider
decl_stmt|;
comment|// User exists
if|if
condition|(
name|user
operator|.
name|emailValidated
condition|)
block|{
name|provider
operator|.
name|sendPasswordResetMailing
argument_list|(
name|user
argument_list|,
name|ctx
argument_list|()
argument_list|)
expr_stmt|;
comment|// In case you actually want to let (the unknown person)
comment|// know whether a user was found/an email was sent, use,
comment|// change the flash message
block|}
else|else
block|{
comment|// We need to change the message here, otherwise the user
comment|// does not understand whats going on - we should not verify
comment|// with the password reset, as a "bad" user could then sign
comment|// up with a fake email via OAuth and get it verified by an
comment|// a unsuspecting user that clicks the link.
name|flash
argument_list|(
name|Application
operator|.
name|FLASH_MESSAGE_KEY
argument_list|,
name|this
operator|.
name|msg
operator|.
name|preferred
argument_list|(
name|request
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
literal|"playauthenticate.reset_password.message.email_not_verified"
argument_list|)
argument_list|)
expr_stmt|;
comment|// You might want to re-send the verification email here...
name|provider
operator|.
name|sendVerifyEmailMailingAfterSignup
argument_list|(
name|user
argument_list|,
name|ctx
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|redirect
argument_list|(
name|routes
operator|.
name|Application
operator|.
name|index
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Returns a token object if valid, null if not 	 *  	 * @param token 	 * @param type 	 * @return 	 */
specifier|private
name|TokenAction
name|tokenIsValid
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
block|{
name|TokenAction
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
operator|!
name|token
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|TokenAction
name|ta
init|=
name|TokenAction
operator|.
name|findByToken
argument_list|(
name|token
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ta
operator|!=
literal|null
operator|&&
name|ta
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|ret
operator|=
name|ta
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Result
name|resetPassword
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TokenAction
name|ta
init|=
name|tokenIsValid
argument_list|(
name|token
argument_list|,
name|Type
operator|.
name|PASSWORD_RESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|ta
operator|==
literal|null
condition|)
block|{
return|return
name|badRequest
argument_list|(
name|no_token_or_invalid
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ok
argument_list|(
name|password_reset
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|,
name|PASSWORD_RESET_FORM
operator|.
name|fill
argument_list|(
operator|new
name|PasswordReset
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Result
name|doResetPassword
parameter_list|()
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Form
argument_list|<
name|PasswordReset
argument_list|>
name|filledForm
init|=
name|PASSWORD_RESET_FORM
operator|.
name|bindFromRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|filledForm
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
return|return
name|badRequest
argument_list|(
name|password_reset
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|,
name|filledForm
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|String
name|token
init|=
name|filledForm
operator|.
name|get
argument_list|()
operator|.
name|token
decl_stmt|;
specifier|final
name|String
name|newPassword
init|=
name|filledForm
operator|.
name|get
argument_list|()
operator|.
name|password
decl_stmt|;
specifier|final
name|TokenAction
name|ta
init|=
name|tokenIsValid
argument_list|(
name|token
argument_list|,
name|Type
operator|.
name|PASSWORD_RESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|ta
operator|==
literal|null
condition|)
block|{
return|return
name|badRequest
argument_list|(
name|no_token_or_invalid
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|User
name|u
init|=
name|ta
operator|.
name|targetUser
decl_stmt|;
try|try
block|{
comment|// Pass true for the second parameter if you want to
comment|// automatically create a password and the exception never to
comment|// happen
name|u
operator|.
name|resetPassword
argument_list|(
operator|new
name|MyUsernamePasswordAuthUser
argument_list|(
name|newPassword
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|RuntimeException
name|re
parameter_list|)
block|{
name|flash
argument_list|(
name|Application
operator|.
name|FLASH_MESSAGE_KEY
argument_list|,
name|this
operator|.
name|msg
operator|.
name|preferred
argument_list|(
name|request
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
literal|"playauthenticate.reset_password.message.no_password_account"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|login
init|=
name|this
operator|.
name|userPaswAuthProvider
operator|.
name|isLoginAfterPasswordReset
argument_list|()
decl_stmt|;
if|if
condition|(
name|login
condition|)
block|{
comment|// automatically log in
name|flash
argument_list|(
name|Application
operator|.
name|FLASH_MESSAGE_KEY
argument_list|,
name|this
operator|.
name|msg
operator|.
name|preferred
argument_list|(
name|request
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
literal|"playauthenticate.reset_password.message.success.auto_login"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|auth
operator|.
name|loginAndRedirect
argument_list|(
name|ctx
argument_list|()
argument_list|,
operator|new
name|MyLoginUsernamePasswordAuthUser
argument_list|(
name|u
operator|.
name|email
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// send the user to the login page
name|flash
argument_list|(
name|Application
operator|.
name|FLASH_MESSAGE_KEY
argument_list|,
name|this
operator|.
name|msg
operator|.
name|preferred
argument_list|(
name|request
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
literal|"playauthenticate.reset_password.message.success.manual_login"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|redirect
argument_list|(
name|routes
operator|.
name|Application
operator|.
name|login
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Result
name|oAuthDenied
parameter_list|(
specifier|final
name|String
name|getProviderKey
parameter_list|)
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ok
argument_list|(
name|oAuthDenied
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|,
name|getProviderKey
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Result
name|exists
parameter_list|()
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ok
argument_list|(
name|exists
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Result
name|verify
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|com
operator|.
name|feth
operator|.
name|play
operator|.
name|module
operator|.
name|pa
operator|.
name|controllers
operator|.
name|Authenticate
operator|.
name|noCache
argument_list|(
name|response
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TokenAction
name|ta
init|=
name|tokenIsValid
argument_list|(
name|token
argument_list|,
name|Type
operator|.
name|EMAIL_VERIFICATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|ta
operator|==
literal|null
condition|)
block|{
return|return
name|badRequest
argument_list|(
name|no_token_or_invalid
operator|.
name|render
argument_list|(
name|this
operator|.
name|userProvider
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|String
name|email
init|=
name|ta
operator|.
name|targetUser
operator|.
name|email
decl_stmt|;
name|User
operator|.
name|verify
argument_list|(
name|ta
operator|.
name|targetUser
argument_list|)
expr_stmt|;
name|flash
argument_list|(
name|Application
operator|.
name|FLASH_MESSAGE_KEY
argument_list|,
name|this
operator|.
name|msg
operator|.
name|preferred
argument_list|(
name|request
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
literal|"playauthenticate.verify_email.success"
argument_list|,
name|email
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|userProvider
operator|.
name|getUser
argument_list|(
name|session
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|redirect
argument_list|(
name|routes
operator|.
name|Application
operator|.
name|index
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|redirect
argument_list|(
name|routes
operator|.
name|Application
operator|.
name|login
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

